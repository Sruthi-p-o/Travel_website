{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { getAuth, signInWithPopup, GithubAuthProvider, signInWithEmailAndPassword, createUserWithEmailAndPassword, updateProfile, GoogleAuthProvider, signOut, onAuthStateChanged } from \"firebase/auth\";\nimport initializeAuthentication from \"../Firebase/firebase.init\";\ninitializeAuthentication();\n\nconst useFirebase = () => {\n  _s();\n\n  const [user, setUser] = useState({});\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n  const auth = getAuth(); // Google sign in\n\n  const signInWithGoogle = () => {\n    setIsLoading(true);\n    const googleProvider = new GoogleAuthProvider();\n    return signInWithPopup(auth, googleProvider);\n  }; // Github sign in\n\n\n  const signInWithGithub = () => {\n    setIsLoading(true);\n    const githubProvider = new GithubAuthProvider();\n    return signInWithPopup(auth, githubProvider);\n  }; // Process login with email and pass\n\n\n  const processLogin = (email, password) => {\n    setIsLoading(true);\n    return signInWithEmailAndPassword(auth, email, password);\n  }; //  Create user with EmailPassword\n\n\n  const createNewUser = (name, email, password) => {\n    setIsLoading(true);\n    return createUserWithEmailAndPassword(auth, email, password);\n  }; //  update name in firebase\n\n\n  const updateName = name => {\n    setIsLoading(true);\n    updateProfile(auth.currentUser, {\n      displayName: name\n    }).then(() => {\n      console.log(\"Name Updated\");\n      setError(\"\");\n    }).catch(error => {\n      setError(error.message);\n    }).finally(() => setIsLoading(false));\n  }; // observe user state change\n\n\n  useEffect(() => {\n    const unsubscribed = onAuthStateChanged(auth, user => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser({});\n      }\n\n      setIsLoading(false);\n    });\n    return () => unsubscribed;\n  }, [auth]); // Sign out\n\n  const logOut = () => {\n    setIsLoading(true);\n    signOut(auth).then(() => {\n      // Sign-out successful.\n      setError(\"\");\n      setSuccess(\"\");\n    }).catch(error => {\n      setError(error.message);\n    }).finally(() => setIsLoading(false));\n  };\n\n  return {\n    user,\n    error,\n    success,\n    isLoading,\n    setUser,\n    setError,\n    setSuccess,\n    setIsLoading,\n    updateName,\n    signInWithGoogle,\n    signInWithGithub,\n    createNewUser,\n    processLogin,\n    logOut\n  };\n};\n\n_s(useFirebase, \"+Qly7Dg/WsozZR9YnPIQwZ3LFIk=\");\n\nexport default useFirebase;","map":{"version":3,"sources":["C:/Users/91949/Downloads/travel react firebase/travel react firebase/tourism-website-travele/src/Hooks/useFirebase.js"],"names":["useEffect","useState","getAuth","signInWithPopup","GithubAuthProvider","signInWithEmailAndPassword","createUserWithEmailAndPassword","updateProfile","GoogleAuthProvider","signOut","onAuthStateChanged","initializeAuthentication","useFirebase","user","setUser","error","setError","success","setSuccess","isLoading","setIsLoading","auth","signInWithGoogle","googleProvider","signInWithGithub","githubProvider","processLogin","email","password","createNewUser","name","updateName","currentUser","displayName","then","console","log","catch","message","finally","unsubscribed","logOut"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { getAuth, signInWithPopup, GithubAuthProvider, signInWithEmailAndPassword, createUserWithEmailAndPassword, updateProfile, GoogleAuthProvider, signOut, onAuthStateChanged } from \"firebase/auth\";\nimport initializeAuthentication from \"../Firebase/firebase.init\";\n\ninitializeAuthentication();\n\nconst useFirebase = () => {\n  const [user, setUser] = useState({});\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(true);\n\n  const auth = getAuth();\n\n  // Google sign in\n  const signInWithGoogle = () => {\n    setIsLoading(true);\n    const googleProvider = new GoogleAuthProvider();\n\n    return signInWithPopup(auth, googleProvider);\n  };\n\n  // Github sign in\n  const signInWithGithub = () => {\n    setIsLoading(true);\n    const githubProvider = new GithubAuthProvider();\n\n    return signInWithPopup(auth, githubProvider);\n  };\n\n  // Process login with email and pass\n  const processLogin = (email, password) => {\n    setIsLoading(true);\n    return signInWithEmailAndPassword(auth, email, password);\n  };\n\n  //  Create user with EmailPassword\n  const createNewUser = (name, email, password) => {\n    setIsLoading(true);\n    return createUserWithEmailAndPassword(auth, email, password);\n  };\n\n  //  update name in firebase\n  const updateName = (name) => {\n    setIsLoading(true);\n    updateProfile(auth.currentUser, { displayName: name })\n      .then(() => {\n        console.log(\"Name Updated\");\n        setError(\"\");\n      })\n      .catch((error) => {\n        setError(error.message);\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  // observe user state change\n  useEffect(() => {\n    const unsubscribed = onAuthStateChanged(auth, (user) => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser({});\n      }\n      setIsLoading(false);\n    });\n    return () => unsubscribed;\n  }, [auth]);\n\n  // Sign out\n  const logOut = () => {\n    setIsLoading(true);\n    signOut(auth)\n      .then(() => {\n        // Sign-out successful.\n        setError(\"\");\n        setSuccess(\"\");\n      })\n      .catch((error) => {\n        setError(error.message);\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  return {\n    user,\n    error,\n    success,\n    isLoading,\n    setUser,\n    setError,\n    setSuccess,\n    setIsLoading,\n    updateName,\n    signInWithGoogle,\n    signInWithGithub,\n    createNewUser,\n    processLogin,\n    logOut\n  };\n};\n\nexport default useFirebase;\n"]},"metadata":{},"sourceType":"module"}